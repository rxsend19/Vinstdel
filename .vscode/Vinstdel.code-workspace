{
    "folders": [
        {
            "path": ".."
        }
    ],
    "settings": {
        "workbench.editor.showTabs": "multiple",
        "files.autoSave": "onFocusChange",
        "editor.formatOnSave": true,
        "editor.insertSpaces": true, // spaces or tabs
        "editor.detectIndentation": false,
        "editor.tabSize": 4,
        "editor.bracketPairColorization.enabled": true,
        //"debug.position"
        "[powershell]": {
            "files.encoding": "utf8bom",
            "files.autoGuessEncoding": true
        },
        "debug.toolBarLocation": "floating",
    },
    "extensions": {
        "recommendations": [
            "yzhang.markdown-all-in-one",
            "davidanson.vscode-markdownlint",
            "ms-vscode.powershell",
            "usernamehw.errorlens"
        ]
    },
    "launch": {
        "version": "0.0.1",
        "configurations": [
            {
                "type": "PowerShell",
                "request": "launch",
                "name": "PowerShell Launch (current file)",
                "script": "${file}",
                "args": [],
                "cwd": "${file}",
            },
        ]
    },
    "tasks": {
        "version": "2.0.0",
        "tasks": [
            {
                "label": "INSTALL extensions recommendations automaticly ",
                "type": "shell",
                "windows": {
                    "command": "$all_ext = (code --list-extensions ); $config_ext = ((Get-Content  -Raw .vscode/*.code-workspace) -replace '\\/\\/.*\\n' -replace '\\n' -replace '\\s' -replace '\\/\\*[^.](.|\\n)*?\\*\\/' -replace ',}', '}' -replace ',]', ']' | ConvertFrom-Json).extensions.recommendations; $problem_arr = @(); foreach ($ext in $config_ext) { if ($all_ext | Where-Object { $ext -match $_ }) { Write-Host 'Already-installed:$ext'; } else { Write-Host 'Install:$ext'; code --install-extension $ext; } }; $all_ext = (code --list-extensions ); foreach ($ext in  $all_ext) { if ($config_ext | Where-Object { $ext -match $_ }) { Write-Host 'exists in config:$ext'; } else { Write-Host 'delete:$ext'; $result = @(code  --uninstall-extension $ext 2>&1); if ('Cannot' | Where-Object { $result -match $_ }) { $problem_arr += $ext; } } }; foreach ($ext in  $problem_arr) { Write-Host 'Re-delete:$ext'; code  --uninstall-extension $ext; }"
                },
                "runOptions": {
                    "runOn": "folderOpen"
                },
                "presentation": {
                    "reveal": "silent",
                    "close": false
                }
            }
        ]
    }
}